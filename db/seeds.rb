# frozen_string_literal: true

# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

ActiveRecord::Base.transaction do
  s = Speaker.create!(name: "Koichi Sasada", handle: "@ko1", thumbnail: "https://www.gravatar.com/avatar/990397e8b38d6f5f4ae8ff343e8b883a?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Koichi Sasada is a programmer, mainly developing Ruby interpreter (CRuby/MRI). He received Ph.D (Information Science and Technology) from the University of Tokyo, 2007. Now he is still working on MRI development at Cookpad Inc. He is also a director of Ruby Association.")
  Schedule.create!(speaker: s, title: "Ractor report", description: "This talk will introduce Ractor, the concurrency system for Ruby 3 based on actual implementation.", start_at: Time.zone.parse("2020-09-04T01:15:00Z"), end_at: Time.zone.parse("2020-09-04T01:40:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Yusuke Endoh", handle: "@mametter", thumbnail: "https://www.gravatar.com/avatar/e73159002200b33d51b7a6a312f2440e?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "'A full-time MRI committer at Cookpad, Inc.  He has been interested in testing, analyzing, abusing of Ruby.  He is an advocate of \"transcendental programming\" that creates a useless program like this bio. (_)'.yield_self{|s|eval(t=%q(puts\"'\#{s.sub(?,?+?_)}'.yield_self{|s|eval(t=%q(\#{t}))}\"))}")
  Schedule.create!(speaker: s, title: "Type Profiler: a Progress Report of a Ruby 3 Type Analyzer", description: "Type Profiler is a type inference tool for plain Ruby code. It analyzes Ruby code that has no type information and guesses a type of the modules and methods in the code. The output will serve as a signature for external type checkers like Sorbet and Steep. Since 2019, we have been developing the tool as one of the key features for Ruby 3 static analysis, and now it works with some practical applications. In this talk, we briefly explain what and how Type Profiler works, present a roadmap and progress of the development, and discuss how useful it is for practical applications with some demos.", start_at: Time.zone.parse("2020-09-04T01:45:00Z"), end_at: Time.zone.parse("2020-09-04T02:10:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Kevin Deisz", handle: "@kddeisz", thumbnail: "https://www.gravatar.com/avatar/8a66c2a7197be751b21ebd35319ec797?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "I am a Staff Production Engineer of Shopify, based out of Boston, Massachusetts. I'm passionate about music, accessibility, and open-source software.")
  Schedule.create!(speaker: s, title: "Prettier Ruby", description: "Prettier was created in 2017 and has since seen a meteoric rise within the JavaScript community. It differentiated itself from other code formatters and linters by supporting minimal configuration, eliminating the need for long discussions and arguments by enforcing an opinionated style on its users. That enforcement ended up resonating well, as it allowed developers to get back to work on the more important aspects of their job.", start_at: Time.zone.parse("2020-09-04T01:45:00Z"), end_at: Time.zone.parse("2020-09-04T02:10:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Urabe, Shyouhei", handle: "@shyouhei", thumbnail: "https://www.gravatar.com/avatar/9d2f78236e45a335301ba1195026105d?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Money Forward, Inc. hire Shyouhei, a long-time ruby-core committer, to contribute to the whole ruby ecosystem. Being a full-time ruby-core developer, his current interest is to speed up ruby execution by modifying its internals. Doing so is not straight-forward because of ruby's highly dynamic nature. To tackle this problem he is implementing a variety of optimisation techniques that are yet to be applied to it.")
  Schedule.create!(speaker: s, title: "On sending methods", description: "As you have noticed 2.7 is faster than older ruby versions.  One of the main reason for this is my optimisation around method invocations.  Let me share what was suboptimal, and how was that fixed.", start_at: Time.zone.parse("2020-09-04T02:15:00Z"), end_at: Time.zone.parse("2020-09-04T02:40:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Ernesto Tagwerker", handle: "@etagwerker", thumbnail: "https://www.gravatar.com/avatar/eceef9c09ab1fb1bd8a997551777a66d?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Ernesto is the Founder of Ombu Labs, a small software development company dedicated to building lean code. When he is not obsessively playing table tennis or chess, he likes to maintain a few Ruby gems including database_cleaner and email-spec. He is passionate about writing less code, launching minimal products, coaching entrepreneurs, contributing to open source, and eating empanadas.")
  Schedule.create!(speaker: s, title: "RubyMem: The Leaky Gems Database for Bundler", description: "Out of memory errors are quite tricky. Our first reaction is always the same: \"It can't be my code, it must be one of my dependencies!\" What if you could quickly check that with bundler? ", start_at: Time.zone.parse("2020-09-04T02:15:00Z"), end_at: Time.zone.parse("2020-09-04T02:40:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Yoh Osaki", handle: "@youchan", thumbnail: "https://www.gravatar.com/avatar/b54abc5e7463fe6470c379e97e3f2477?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Software engineer at Retrieva inc.\nAuthor of Hyalite which is react like virtual DOM library.\nMember of Asakusa.rb, Chidoriashi.rb")
  Schedule.create!(speaker: s, title: "Asynchronous Opal", description: "Opal is a compiler convert from Ruby to JavaScript. JavaScript has async/await syntax for asynchronous processing.\nBut Opal hasn't implemented it yet.\nThe Opal community had been discussed mapping Fiber semantics to JavaScript async/await. The conclusion was it is impossible to map coroutine such as Fiber because async/await is just a syntax sugar that expresses nested callbacks into flat statements.\nI'm going to talk about the idea I'm trying to incorporate easy-to-use asynchronous processing into Opal.", start_at: Time.zone.parse("2020-09-04T02:45:00Z"), end_at: Time.zone.parse("2020-09-04T03:10:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Ufuk Kayserilioglu", handle: "@paracycle", thumbnail: "https://www.gravatar.com/avatar/2bb923c57a1fdc3a2eb484bb8d565fd2?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Ufuk is the Production Engineering Manager of the Ruby Infrastructure team at Shopify. He has over 20 years of experience working with statically and dynamically typed languages ranging from low-level communication programming to web development. He brings that experience to Shopify for the adoption of better Ruby tooling and practices. He currently works remotely from Cyprus where he lives with his beloved wife and wonderful daughter.")
  Schedule.create!(speaker: s, title: "Reflecting on Ruby Reflection for Rendering RBIs", description: "As part of our adoption process of Sorbet at Shopify, we needed an automated way to teach Sorbet about our ~400 gem dependencies. We decided to tackle this problem by generating interface files (RBI) for each gem via runtime reflection.", start_at: Time.zone.parse("2020-09-04T02:45:00Z"), end_at: Time.zone.parse("2020-09-04T03:10:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Sutou Kouhei", handle: "@ktou", thumbnail: "https://www.gravatar.com/avatar/2d9386b1504e581be390af978e05a8b9?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "He is a free software programmer and the president of ClearCode Inc. He is also the namer of ClearCode Inc. The origin of the company name is \"clear code\". We will be programmers that code clear code as our company name suggests. He is a maintainer of rake-compiler gem that helps fat gem developers. He was  maintain Ruby-GNOME that had many fat gems.")
  Schedule.create!(speaker: s, title: "Goodbye fat gem", description: "Fat gem mechanism is useful to install extension library without any compiler. Fat gem mechanism is especially helpful for Windows rubyists because Windows rubyists don't have compiler. But there are some downsides. For example, fat gem users can't use Ruby 2.7 (the latest Ruby) until fat gem developers release a new gem for Ruby 2.7. As of 2020, pros of fat gem mechanism is decreasing and cons of it is increasing. This talk describes the details of pros and cons of it then says thanks and goodbye to fat gem.", start_at: Time.zone.parse("2020-09-04T04:00:00Z"), end_at: Time.zone.parse("2020-09-04T04:25:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Vladimir Dementyev", handle: "@palkan_tula", thumbnail: "https://www.gravatar.com/avatar/52cc8a838bf44a589d2572833b2dd1b9?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Vladimir is a mathematician who found his happiness in programming Ruby and Erlang, contributing to open source and being an Evil Martian. Author of AnyCable, TestProf and many yet unknown ukulele melodies.")
  Schedule.create!(speaker: s, title: "The whys and hows of transpiling Ruby", description: "Transpiling is a source-to-source compiling. Why might we need it in Ruby? Compatibility and experiments.", start_at: Time.zone.parse("2020-09-04T04:00:00Z"), end_at: Time.zone.parse("2020-09-04T04:25:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Samuel Williams", handle: "@ioquatix", thumbnail: "https://www.gravatar.com/avatar/1373435a1059a97614969ab154c5b224?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "I am a software engineer, and I am motivated by the beauty I uncover when building complex systems.")
  Schedule.create!(speaker: s, title: "Don't Wait For Me! Scalable Concurrency for Ruby 3!", description: "We have proven that fibers are useful for building scalable systems. In order to develop this further, we need to add hooks into the various Ruby VMs so that we can improve the concurrency of existing code without changes. There is an outstanding PR for this work, but additional effort is required to bring this to completion and show its effectiveness in real world situations. We will discuss the implementation of this PR, the implementation of the corresponding Async Scheduler, and how they work together to improve the scalability of Ruby applications.", start_at: Time.zone.parse("2020-09-04T04:30:00Z"), end_at: Time.zone.parse("2020-09-04T04:55:00Z"), track_name: "TrackA", language: :en)
  s = Speaker.create!(name: "Hitoshi HASUMI", handle: "@hasumikin", thumbnail: "https://www.gravatar.com/avatar/d62b18efd2549587e712cebf6403861a?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "A programmer of Monstar Lab at Shimane office")
  Schedule.create!(speaker: s, title: "mruby machine: An Operating System for Microcontoller", description: "There are different approaches to make an operating system.", start_at: Time.zone.parse("2020-09-04T04:30:00Z"), end_at: Time.zone.parse("2020-09-04T04:55:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Koichi ITO", handle: "@koic", thumbnail: "https://www.gravatar.com/avatar/023b04c98f39cc041293d780352432ff?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Koichi ITO is a member of RuboCop's core developers team. He is a practitioner of Ruby/Rails application development with eXtreme Programming. He works at ESM, Inc.")
  Schedule.create!(speaker: s, title: "Road to RuboCop 1.0", description: "RuboCop 1.0 is coming soon.", start_at: Time.zone.parse("2020-09-04T05:00:00Z"), end_at: Time.zone.parse("2020-09-04T05:25:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Soutaro Matsumoto", handle: "@soutaro", thumbnail: "https://www.gravatar.com/avatar/1fab9d01b25e99522f3dfd01e3d4cb51?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Software engineer at Square.")
  Schedule.create!(speaker: s, title: "The State of Ruby 3 Typing", description: "Ruby 3 will ship with a new feature for type checking, RBS. It provides a language to describe types of Ruby programs, the type declarations for standard library classes, and a set of features to support using and developing type checkers. In this talk, I will introduce the feature and how the Ruby programming will be with RBS.", start_at: Time.zone.parse("2020-09-04T05:00:00Z"), end_at: Time.zone.parse("2020-09-04T05:25:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Masatoshi SEKI", handle: "@m_seki", thumbnail: "https://www.gravatar.com/avatar/40f4d1f2e77078955bd01e9fb4a503ba?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Masatoshi Seki is a Ruby committer and the author of several Ruby standard libraries including dRuby, ERB, and Rinda. He’s an expert in object-oriented programming, distributed systems, and eXtreme programming. He has been speaking at RubyKaigi every year since 2006 when the Kaigi first started.")
  Schedule.create!(speaker: s, title: "Rinda in the real-world embedded systems.", description: "Okayama Astrophysical Observatory Wide-Field Camera (OAOWFC), is an autonomous wide-field near-infrared camera and has been in operation since 2015. A distributed control system is operated via control software using Rinda.\nI report the implementation of the robot telescope 🤖🔭.", start_at: Time.zone.parse("2020-09-04T05:30:00Z"), end_at: Time.zone.parse("2020-09-04T05:50:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Benoit Daloze", handle: "@eregontp", thumbnail: "https://www.gravatar.com/avatar/0ea7f61aec8fee539be0cf39b7bab77c?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Benoit Daloze is the lead of TruffleRuby at Oracle Labs. He did a PhD on concurrency in Ruby with TruffleRuby. He has contributed to many Ruby implementations, including TruffleRuby, MRI and JRuby. He is the maintainer of ruby/spec, a test suite for the behavior of the Ruby programming language.")
  Schedule.create!(speaker: s, title: "Running Rack and Rails Faster with TruffleRuby", description: "Optimizing Rack and Rails applications with a just-in-time (JIT) compiler is a challenge. For example, MJIT does not speed up Rails currently.\nTruffleRuby tackles this challenge. We have been running the Rails Simpler Benchmarks with TruffleRuby and now achieve higher performance than any other Ruby implementation.", start_at: Time.zone.parse("2020-09-04T05:30:00Z"), end_at: Time.zone.parse("2020-09-04T05:50:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "No Name", handle: "@rubylangorg", thumbnail: "/2020-takeout/images/schedule/presentation_avatar.png", profile: "NO PROFILE")
  Schedule.create!(speaker: s, title: "Ruby Committers vs the World", description: "Ruby core all stars on stage!", start_at: Time.zone.parse("2020-09-04T06:00:00Z"), end_at: Time.zone.parse("2020-09-04T06:30:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "No Name", handle: "@rubylangorg", thumbnail: "/2020-takeout/images/schedule/presentation_avatar.png", profile: "NO PROFILE")
  Schedule.create!(speaker: s, title: "Ruby Committers vs the World", description: "Ruby core all stars on stage!", start_at: Time.zone.parse("2020-09-05T01:05:00Z"), end_at: Time.zone.parse("2020-09-05T01:45:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Shugo Maeda", handle: "@shugomaeda", thumbnail: "https://www.gravatar.com/avatar/18a797893e6768e048c1d15429f96bb4?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "The Creator of Textbringer, a Ruby committer, Director of Network Applied Communication Laboratory, and Secretary general of the Ruby Association")
  Schedule.create!(speaker: s, title: "Magic is organizing chaos", description: "The power of Law (e.g., type signatures, type checkers, type profilers) is growing toward Ruby 3.\nWe need the power of Chaos for the Cosmic Balance.", start_at: Time.zone.parse("2020-09-05T01:50:00Z"), end_at: Time.zone.parse("2020-09-05T02:10:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Yuji Yokoo", handle: "@yuji_yokoo", thumbnail: "https://www.gravatar.com/avatar/b87628a711b78598dcd409da186cd633?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Yuji is a software developer based in Adelaide, South Australia. He was born and raised in Tokyo, Japan. He used to be a Windows desktop application developer until he discovered Ruby. He enjoys console video gaming, programming, and especially mixing both of them together.")
  Schedule.create!(speaker: s, title: "Developing your Dreamcast apps and games with mruby", description: "What would you make, if you can run your Ruby code on Dreamcast?", start_at: Time.zone.parse("2020-09-05T01:50:00Z"), end_at: Time.zone.parse("2020-09-05T02:10:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "ODA Hirohito", handle: "@jimlock", thumbnail: "https://www.gravatar.com/avatar/72e4a8bf47620de5381ff20f3deda977?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: ";)")
  Schedule.create!(speaker: s, title: "msgraph: Microsoft Graph API Client with Ruby", description: "msgraph is the unofficial Microsoft Graph API Client with Ruby.\nThe official Microsoft Graph Client Library for Ruby is microsoft_graph. However, since its release on August 1, 2016, the preview version has been continued and has not been maintained. So, I created an API client that I can maintain on my own.", start_at: Time.zone.parse("2020-09-05T02:15:00Z"), end_at: Time.zone.parse("2020-09-05T02:40:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "蒼時弦也", handle: "@elct9620", thumbnail: "https://www.gravatar.com/avatar/888339de9e7a88688b6acb30d33e66cd?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Game Developer / 5xruby's Rails Developer. Enjoy trying anything that can work with Ruby in Game, IoT or anything else.")
  Schedule.create!(speaker: s, title: "Is it time run Ruby on Web via WebAssembly?", description: "The W3C is starting to recommend to use WebAssembly, and we can compile mruby to WebAssembly very easy in now day. But we have Opal and it works well, we really need to use WebAssembly? Let me share my experience about trying to add mruby to HTML5 game, and discuss the pros and cons when we use Ruby in WebAssembly way in Web.", start_at: Time.zone.parse("2020-09-05T02:15:00Z"), end_at: Time.zone.parse("2020-09-05T02:40:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Aaron Patterson", handle: "@tenderlove", thumbnail: "https://www.gravatar.com/avatar/f29327647a9cff5c69618bae420792ea?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Aaron is on the Ruby core team, the Rails core team, and the team that takes care of his cat, Gorby puff.   Someday he will find the perfect safety gear to wear while extreme programming.")
  Schedule.create!(speaker: s, title: "Don't @ me!  Instance Variable Performance in Ruby", description: "How do instance variables work?  We've all used instance variables in our programs, but how do they actually work?  In this presentation we'll look at how instance variables are implemented in Ruby.  We'll start with a very strange benchmark, then dive in to Ruby internals to understand why the code behaves the way it does.  Once we've figured out this strange behavior, we'll follow up with a patch to increase instance variable performance.  Be prepared for a deep dive in to a weird area of Ruby, and remember: don't @ me!", start_at: Time.zone.parse("2020-09-05T02:45:00Z"), end_at: Time.zone.parse("2020-09-05T03:10:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Lin Yu Hsiang", handle: "@johnlinvc", thumbnail: "https://www.gravatar.com/avatar/3f7d9611fc919c98512b779cde637dfc?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Cloud Platform Engineer at Exosite. Ruby lover. Full-stack developer. Organizer of Swift Taipei.  iOS developer. FP lover.")
  Schedule.create!(speaker: s, title: "mruby-rr: Time Traveling Debugger For mruby Using rr", description: "Debugging bugs that don't happen every time is painful. It needs both technique and luck.\nWhen dealing with these, a mistyped continue command is irreversible and will take us a whole afternoon just to reproduce the issue again.", start_at: Time.zone.parse("2020-09-05T02:45:00Z"), end_at: Time.zone.parse("2020-09-05T03:10:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Hiroshi SHIBATA", handle: "@hsbt", thumbnail: "https://www.gravatar.com/avatar/eabad423977cfc6873b8f5df62b848a6?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "A member of Ruby core team. He maintains RubyGems, Rake, rdoc, psych, ruby-build, etc. and He is an administrator of ruby-lang.org and supports to develop the environment of Ruby language.")
  Schedule.create!(speaker: s, title: "Dependency Resolution with Standard Libraries", description: "I maintain the RubyGems, Bundler and the standard libraries of the Ruby language. So, I have a plan to make all of the standard libraries to default gems at Ruby 3. In the past, I described the detail of default gems and bundled gems at RubyKaigi and the Ruby conferences in the world. But the users still confused the differences standard libraries and default/bundled gems.", start_at: Time.zone.parse("2020-09-05T04:00:00Z"), end_at: Time.zone.parse("2020-09-05T04:25:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Jônatas Davi Paganini", handle: "@jonatas", thumbnail: "https://www.gravatar.com/avatar/faae82c588349e1b51d9ff9b5431e10c?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "My work is onboard people in a large Ruby codebase, and most of the time, I'm showing code or hunting for some code examples.")
  Schedule.create!(speaker: s, title: "Live coding: Grepping Ruby code like a boss", description: "Our favorite language allows us to implement the same code in a few different ways. Because of that, it becomes tough to search and find the target code only with regular expressions.", start_at: Time.zone.parse("2020-09-05T04:00:00Z"), end_at: Time.zone.parse("2020-09-05T04:25:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "ITOYANAGI Sakura", handle: "@aycabta", thumbnail: "https://www.gravatar.com/avatar/43da97eeeac8fafd2bf196db1f19c534?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "NO PROFILE")
  Schedule.create!(speaker: s, title: "The Complex Nightmare of the Asian Cultural Area", description: "There are many different cultures in Asia that seem odd to the rest of the world. This session introduces the complexities of the current situation and the various technologies that have been created to achieve their goals.", start_at: Time.zone.parse("2020-09-05T04:30:00Z"), end_at: Time.zone.parse("2020-09-05T04:55:00Z"), track_name: "TrackA", language: :en)
  s = Speaker.create!(name: "Katsuhiko Kageyama", handle: "@kishima", thumbnail: "https://www.gravatar.com/avatar/30b735d887bdd9c0b0b9ff466ba887d0?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Embedded software engineer in a manufacturing company. \nOrganizing a mruby community \"mruby meetup\".\nPersonally, producing technical books about mruby and original devices in TechBookFest, Comic Market and Maker Faire(2020 Tsukuba).")
  Schedule.create!(speaker: s, title: "Now is the time to create your own (m)Ruby computer", description: "mruby has been known as a good tool for supporting server applications and embedded softwares like an IoT application on a small CPU whose resource is limited. Now times are changing. mruby gets more power from recent micro processors. I believe now Ruby engineers can create their own computer as per their wish. Basic process and essential technique how to create an original (m)Ruby computer will be shown in the talk with a live demonstration of the computer.", start_at: Time.zone.parse("2020-09-05T04:30:00Z"), end_at: Time.zone.parse("2020-09-05T04:55:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Hideki Miura", handle: "@miura1729", thumbnail: "https://www.gravatar.com/avatar/360c8e3a4839819090e66e6ddf4b99ad?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "I am a plumber.")
  Schedule.create!(speaker: s, title: "Ruby to C Translator by AI", description: "I am developing Ruby to C Translator  \"MMC\". This uses AI (i.e. Abstract Interpretation) for Type Profiling and Escape Analysis. MMC generates very efficient C code  by AI. For example , MMC gains about 50 times faster than CRuby for ao-bench  (faster than C version).\nI will presentation the technical detail of MMC especially escape analysis.", start_at: Time.zone.parse("2020-09-05T05:00:00Z"), end_at: Time.zone.parse("2020-09-05T05:25:00Z"), track_name: "TrackA", language: :ja)
  s = Speaker.create!(name: "Jeremy Evans", handle: "@jeremyevans0", thumbnail: "https://www.gravatar.com/avatar/f183bcc4176b308c9edabe79299e448f?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "Jeremy Evans is a Ruby committer.  He is the maintainer of Ruby ports for the OpenBSD operating system.  He is also the lead developer of the Sequel database library, the Roda web toolkit, the Rodauth authentication framework, and many other Ruby libraries.")
  Schedule.create!(speaker: s, title: "Keyword Arguments: Past, Present, and Future", description: "Ruby 3 will separate keyword arguments from positional arguments, which causes the biggest backwards compatibility issues in Ruby since Ruby 1.9.  This presentation will discuss the history of keyword arguments, how keyword arguments are handled internally, how keyword arguments were separated from positional arguments internally, and possible future improvements in the handling of keyword arguments.", start_at: Time.zone.parse("2020-09-05T05:00:00Z"), end_at: Time.zone.parse("2020-09-05T05:25:00Z"), track_name: "TrackB", language: :en)
  s = Speaker.create!(name: "Yukihiro \"Matz\" Matsumoto", handle: "@yukihiro_matz", thumbnail: "https://www.gravatar.com/avatar/0ec4920185b657a03edf01fff96b4e9b?s=268&d=https%3A%2F%2Frubykaigi.org%2F2020%2Fimages%2Fspeakers%2Fdummy-avatar.png", profile: "The Creator of Ruby")
  Schedule.create!(speaker: s, title: "Matz Keynote", description: "TBD", start_at: Time.zone.parse("2020-09-05T05:30:00Z"), end_at: Time.zone.parse("2020-09-05T06:05:00Z"), track_name: "TrackA", language: :ja)
end
